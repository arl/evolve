package factory

import (
	"bytes"
	"errors"
	"math/rand"
	"unicode/utf8"

	"github.com/aurelien-rainone/evolve/base"
)

/**
 * General-purpose candidate factory for EAs that use a fixed-length String encoding.
 * Generates random strings of a fixed length from a given alphabet.
 * @author Daniel Dyer
 */
type StringFactory struct {
	AbstractCandidateFactory
}

/**
 * @param alphabet The set of characters that can legally occur within a
 * string generated by this factory.
 * @param stringLength The fixed length of all strings generated by this
 * factory.
 */
func NewStringFactory(alphabet string, stringLength int) (*StringFactory, error) {
	// safety checks
	if len(alphabet) == 0 {
		return nil, errors.New("can't create StringFactory with an empty alphabet")
	}
	if stringLength == 0 {
		return nil, errors.New("can't create StringFactory with a string length equals to 0")
	}

	var sf *StringFactory

	// ascii only alphabet
	if utf8.RuneCountInString(alphabet) == len(alphabet) {
		sf = &StringFactory{
			AbstractCandidateFactory{
				&asciiStringGenerator{
					alphabet:     alphabet,
					stringLength: stringLength,
				},
			},
		}

	}
	// unicode alphabet
	sf = &StringFactory{
		AbstractCandidateFactory{
			&unicodeStringGenerator{
				alphabet:     []rune(alphabet),
				stringLength: stringLength,
			},
		},
	}
	return sf, nil
}

type unicodeStringGenerator struct {
	alphabet     []rune
	stringLength int
}

/**
 * Generates a random string of a pre-configured length.  Each character
 * is randomly selected from the pre-configured alphabet.  The same
 * character may appear multiple times and some characters may not appear
 * at all.
 * @param rng A source of randomness used to select characters to make up
 * the string.
 * @return A randomly generated string.
 */
func (g *unicodeStringGenerator) GenerateRandomCandidate(rng *rand.Rand) base.Candidate {
	var buffer bytes.Buffer
	for i := 0; i < g.stringLength; i++ {
		idx := rand.Int31n(int32(len(g.alphabet)))
		r := g.alphabet[idx]
		buffer.WriteRune(r)
	}
	return buffer.String()
}

type asciiStringGenerator struct {
	alphabet     string
	stringLength int
}

/**
 * Generates a random string of a pre-configured length.  Each character
 * is randomly selected from the pre-configured alphabet.  The same
 * character may appear multiple times and some characters may not appear
 * at all.
 * @param rng A source of randomness used to select characters to make up
 * the string.
 * @return A randomly generated string.
 */
func (g *asciiStringGenerator) GenerateRandomCandidate(rng *rand.Rand) base.Candidate {
	var buffer bytes.Buffer
	for i := 0; i < g.stringLength; i++ {
		idx := rand.Int31n(int32(len(g.alphabet)))
		buffer.WriteByte(g.alphabet[idx])
	}
	return buffer.String()
}
